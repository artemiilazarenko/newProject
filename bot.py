import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("TELEGRAM_TOKEN not set")
    raise ValueError("TELEGRAM_TOKEN environment variable is not set")
bot = telebot.TeleBot(TOKEN)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! 

–Ø ‚Äî –ü–æ–ª–∏–Ω–∞ –ö—É—Å–æ–≤–∞ 
–ü—Å–∏—Ö–æ–ª–æ–≥-—Å–µ–∫—Å–æ–ª–æ–≥ | –°–µ–º–µ–π–Ω—ã–π —Ç–µ—Ä–∞–ø–µ–≤—Ç | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å | –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Resonance.Lab

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É—Å–ª–æ–≤–∏—è—Ö, —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ: 

üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ (–æ—Ñ–ª–∞–π–Ω)
üíª –û–Ω–ª–∞–π–Ω

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –¥–∏–∞–ª–æ–≥.

–° —Ç–µ–ø–ª–æ–º,
–ü–æ–ª–∏–Ω–∞ –ö—É—Å–æ–≤–∞

P.S. –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram +357 9689 2912. –û—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
"""

# –°—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
LINKS = {
    "limassol_individual": "https://2meetup.in/polina-psychologist/meet30",
    "limassol_couple": "https://2meetup.in/polina-psychologist/terapiya-pary",
    "online_individual": "https://2meetup.in/polina-psychologist1/individualnaya-vstrecha-onlajn",
    "online_couple": "https://2meetup.in/polina-psychologist1/meet30"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f"Received /start from chat_id: {message.chat.id}")
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ", callback_data="location_limassol"),
        InlineKeyboardButton("üíª –û–Ω–ª–∞–π–Ω", callback_data="location_online")
    )
    bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("location_"))
def handle_location(call):
    logger.info(f"Received location callback: {call.data}")
    location = call.data.split("_")[1]
    text = (
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ.\n–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?"
        if location == "limassol"
        else "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:"
    )
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è", callback_data=f"session_{location}_individual"),
        InlineKeyboardButton("üë• –ü–∞—Ä–Ω–∞—è", callback_data=f"session_{location}_couple")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("session_"))
def handle_session(call):
    logger.info(f"Received session callback: {call.data}")
    _, location, session_type = call.data.split("_")
    key = f"{location}_{session_type}"
    link = LINKS.get(key, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {'–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ' if key == 'limassol_individual' else '–ø–∞—Ä–Ω—É—é —Ç–µ—Ä–∞–ø–∏—é –≤ –æ—Ñ–∏—Å–µ (–õ–∏–º–∞—Å—Å–æ–ª)' if key == 'limassol_couple' else '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –æ–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏—é' if key == 'online_individual' else '–ø–∞—Ä–Ω—É—é –æ–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏—é'}.\n\n"
        f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\nüëâ {link}"
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text
    )

# Vercel serverless —Ñ—É–Ω–∫—Ü–∏—è
def handler(event, context):
    logger.info(f"Received event: {json.dumps(event)}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = event.get('body', '')
        if not body:
            logger.warning("Empty body received")
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "Empty body"})
            }

        # –ï—Å–ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64 (Vercel –∏–Ω–æ–≥–¥–∞ —Ç–∞–∫ –¥–µ–ª–∞–µ—Ç)
        if event.get('isBase64Encoded', False):
            import base64
            body = base64.b64decode(body).decode('utf-8')

        # –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ JSON
        try:
            body = json.loads(body) if isinstance(body, str) else body
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse body as JSON: {str(e)}")
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "Invalid JSON"})
            }

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update = telebot.types.Update.de_json(body)
        if update:
            logger.info(f"Processing update: {json.dumps(body)}")
            bot.process_new_updates([update])
            return {
                "statusCode": 200,
                "body": json.dumps({"status": "OK"})
            }
        else:
            logger.warning("No valid update received")
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "No valid update"})
            }

    except Exception as e:
        logger.error(f"Error processing request: {str(e)}", exc_info=True)
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
