from flask import Flask, request, abort
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os
import json
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("TELEGRAM_TOKEN not set")
    raise ValueError("TELEGRAM_TOKEN environment variable is not set")
bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö update_id (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
processed_updates = set()

WELCOME_MESSAGE = """
–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! 

–Ø ‚Äî –ü–æ–ª–∏–Ω–∞ –ö—É—Å–æ–≤–∞ 
–ü—Å–∏—Ö–æ–ª–æ–≥-—Å–µ–∫—Å–æ–ª–æ–≥ | –°–µ–º–µ–π–Ω—ã–π —Ç–µ—Ä–∞–ø–µ–≤—Ç | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å | –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Resonance.Lab

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É—Å–ª–æ–≤–∏—è—Ö, —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ: 

üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ (–æ—Ñ–ª–∞–π–Ω)
üíª –û–Ω–ª–∞–π–Ω

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –¥–∏–∞–ª–æ–≥.

–° —Ç–µ–ø–ª–æ–º,
–ü–æ–ª–∏–Ω–∞ –ö—É—Å–æ–≤–∞

P.S. –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram +357 9689 2912. –û—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
"""

LINKS = {
    "limassol_individual": "https://2meetup.in/polina-psychologist/meet30",
    "limassol_couple": "https://2meetup.in/polina-psychologist/terapiya-pary",
    "online_individual": "https://2meetup.in/polina-psychologist1/individualnaya-vstrecha-onlajn",
    "online_couple": "https://2meetup.in/polina-psychologist1/meet30"
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton("üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ"),
        KeyboardButton("üíª –û–Ω–ª–∞–π–Ω"),
        KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
    )
    return markup

# –ú–µ–Ω—é —Å "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"
def get_back_to_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))
    return markup

# –ú–µ–Ω—é —Å "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
def get_back_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f"Received /start from chat_id: {message.chat.id}")
    bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ["üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ", "üíª –û–Ω–ª–∞–π–Ω"])
def handle_menu(message):
    logger.info(f"Received menu choice: {message.text} from chat_id: {message.chat.id}")
    location = "limassol" if message.text == "üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ" else "online"
    text = (
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ.\n–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?"
        if location == "limassol"
        else "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:"
    )
    inline_markup = InlineKeyboardMarkup()
    inline_markup.add(
        InlineKeyboardButton("üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è", callback_data=f"session_{location}_individual"),
        InlineKeyboardButton("üë• –ü–∞—Ä–Ω–∞—è", callback_data=f"session_{location}_couple")
    )
    back_markup = get_back_menu()  # –î–æ–±–∞–≤–ª—è–µ–º "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" –≤ reply-–∫–Ω–æ–ø–∫–∏
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:", reply_markup=back_markup)  # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reply-–∫–Ω–æ–ø–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@bot.message_handler(func=lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
def handle_contacts(message):
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram +357 9689 2912. –û—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.", reply_markup=get_back_to_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
def back_to_start(message):
    start(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
def back(message):
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞–∑–∞–¥.", reply_markup=get_main_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith("session_"))
def handle_session(call):
    logger.info(f"Received session callback: {call.data}")
    if call.message:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        _, location, session_type = call.data.split("_")
        key = f"{location}_{session_type}"
        link = LINKS.get(key, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {'–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ' if key == 'limassol_individual' else '–ø–∞—Ä–Ω—É—é —Ç–µ—Ä–∞–ø–∏—é –≤ –æ—Ñ–∏—Å–µ (–õ–∏–º–∞—Å—Å–æ–ª)' if key == 'limassol_couple' else '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –æ–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏—é' if key == 'online_individual' else '–ø–∞—Ä–Ω—É—é –æ–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏—é'}.\n\n"
            f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\nüëâ {link}"
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text
        )
        bot.send_message(call.message.chat.id, "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:", reply_markup=get_back_to_main_menu())  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ" —Å —Ç–µ–∫—Å—Ç–æ–º

@app.route('/', methods=['GET', 'HEAD'])
def index():
    return ''

@app.route('/', methods=['POST'])
def webhook():
    logger.info("Received webhook request")
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            logger.info(f"JSON string: {json_string}")
            update_dict = json.loads(json_string)
            update = telebot.types.Update.de_json(update_dict)
            if update and update.update_id not in processed_updates:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                processed_updates.add(update.update_id)
                logger.info(f"Processing new update: {update.update_id}")
                bot.process_new_updates([update])
                return '', 200
            else:
                logger.warning("Duplicate or invalid update")
                return '', 200
        else:
            logger.warning("Invalid content-type")
            abort(403)
    except Exception as e:
        logger.error(f"Error in webhook: {str(e)}")
        return '', 500

if __name__ == '__main__':
    app.run(debug=True)
