from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os
import json
import logging
import asyncio
import base64

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("TELEGRAM_TOKEN not set")
    raise ValueValue("TELEGRAM_TOKEN not set")
bot = Bot(token=TOKEN)
dp = Dispatcher()

app = Flask(__name__)

WELCOME_MESSAGE = """
–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! 

–Ø ‚Äî –ü–æ–ª–∏–Ω–∞ –ö—É—Å–æ–≤–∞ 
–ü—Å–∏—Ö–æ–ª–æ–≥-—Å–µ–∫—Å–æ–ª–æ–≥ | –°–µ–º–µ–π–Ω—ã–π —Ç–µ—Ä–∞–ø–µ–≤—Ç | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å | –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Resonance.Lab

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É—Å–ª–æ–≤–∏—è—Ö, —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ: 

üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ (–æ—Ñ–ª–∞–π–Ω)
üíª –û–Ω–ª–∞–π–Ω

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –¥–∏–∞–ª–æ–≥.

–° —Ç–µ–ø–ª–æ–º,
–ü–æ–ª–∏–Ω–∞ –ö—É—Å–æ–≤–∞

P.S. –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram +357 9689 2912. –û—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
"""

LINKS = {
    "limassol_individual": "https://2meetup.in/polina-psychologist/meet30",
    "limassol_couple": "https://2meetup.in/polina-psychologist/terapiya-pary",
    "online_individual": "https://2meetup.in/polina-psychologist1/individualnaya-vstrecha-onlajn",
    "online_couple": "https://2meetup.in/polina-psychologist1/meet30"
}

def get_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton("üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ"),
        KeyboardButton("üíª –û–Ω–ª–∞–π–Ω"),
        KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
    )
    return markup

def get_back_to_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))
    return markup

@dp.message(commands=['start'])
async def start(message: types.Message):
    logger.info(f"Received /start from chat_id: {message.chat.id}")
    await message.answer(WELCOME_MESSAGE, reply_markup=get_main_menu())
    logger.info(f"Sent welcome to chat_id: {message.chat.id}")

@dp.message(lambda message: message.text in ["üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ", "üíª –û–Ω–ª–∞–π–Ω"])
async def handle_menu(message: types.Message):
    logger.info(f"Received menu choice: {message.text} from chat_id: {message.chat.id}")
    location = "limassol" if message.text == "üìç –í –õ–∏–º–∞—Å—Å–æ–ª–µ" else "online"
    text = (
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ.\n–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?"
        if location == "limassol"
        else "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:"
    )
    inline_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è", callback_data=f"session_{location}_individual")],
        [InlineKeyboardButton("üë• –ü–∞—Ä–Ω–∞—è", callback_data=f"session_{location}_couple")]
    ])
    await message.answer(text, reply_markup=inline_markup)

@dp.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_contacts(message: types.Message):
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram +357 9689 2912. –û—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.", reply_markup=get_back_to_main_menu())

@dp.message(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
async def back_to_start(message: types.Message):
    await start(message)

@dp.callback_query(lambda call: call.data.startswith("session_"))
async def handle_session(call: types.CallbackQuery):
    logger.info(f"Received session callback: {call.data}")
    _, location, session_type = call.data.split("_")
    key = f"{location}_{session_type}"
    link = LINKS.get(key, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {'–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ' if key == 'limassol_individual' else '–ø–∞—Ä–Ω—É—é —Ç–µ—Ä–∞–ø–∏—é –≤ –æ—Ñ–∏—Å–µ (–õ–∏–º–∞—Å—Å–æ–ª)' if key == 'limassol_couple' else '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –æ–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏—é' if key == 'online_individual' else '–ø–∞—Ä–Ω—É—é –æ–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏—é'}.\n\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\nüëâ {link}"
    await call.message.edit_text(text)
    await call.message.answer(" ", reply_markup=get_back_to_main_menu())

@app.route('/', methods=['GET', 'HEAD'])
def index():
    return ''

@app.route('/', methods=['POST'])
async def webhook():
    logger.info("Received webhook request")
    try:
        body = request.get_data()
        if request.headers.get('X-Vercel-Encoding') == 'base64':
            body = base64.b64decode(body)
        json_string = body.decode('utf-8')
        update = types.Update.de_json(json.loads(json_string))
        await dp.process_update(update)
    except Exception as e:
        logger.error(f"Error in webhook: {str(e)}")
    return '', 200

if __name__ == '__main__':
    app.run(debug=True)
